## camera(pinhole) [real fov-degree 50] [vector3r position "0 0 16"] [vector3r direction "0 0 -1"]
## film(hdr-rgb) [integer width 800] [integer height 800] [string filter-name "mn"]
## sample-generator(stratified) [integer sample-amount 40][integer num-strata-2d-x 800][integer num-strata-2d-y 800]
## integrator(backward-path)


-> geometry(rectangle) @plane [real width 1][real height 1]
-> geometry(rectangle) @planeS [real width 1][real height 1][real texcoord-scale 3]

// top light (left)
-> material(matte-opaque) @topLightMaterial1 [vector3r albedo "0.5 0.5 0.5"]
//-> light-source(area) @topLightSource1 [vector3r emitted-radiance "3.4 3.4 3.4"]


-> image(constant) @blackImg [real value 0]
-> image(constant) @grayImg  [real value 0.5]
-> image(constant) @whiteImg [real value "1 1 1"]
-> image(ldr-picture) @whiteLdrImg [string image "1x1_white.png"]

-> image(checkerboard) @blackGrayImg [real x-tiles 5] [real y-tiles 5] [image odd @blackImg] [image even @grayImg]
-> image(checkerboard) @grayWhiteImg [real x-tiles 5] [real y-tiles 5] [image odd @grayImg]  [image even @whiteImg]

-> image(checkerboard) @blackGrayWhiteImg [real x-tiles 5] [real y-tiles 5] [image odd @blackGrayImg] [image even @grayWhiteImg]

-> light-source(area) @topLightSource1 [image emitted-radiance @whiteLdrImg]



-> actor(light) @topLight1 [geometry geometry @plane] [material material @topLightMaterial1] [light-source light-source @topLightSource1]
//-> actor(light) translate(@topLight1) [vector3r factor "-3 4.75 0"]
-> actor(light) translate(@topLight1) [vector3r factor "0 0 -4.75"]
//-> actor(light) rotate(@topLight1) [vector3r axis "1 0 0"] [real degree 90]
-> actor(light) scale(@topLight1) [vector3r factor "10 10 10"]

// top light (right)
//-> material(matte-opaque) @topLightMaterial2 [vector3r albedo "0.5 0.5 0.5"]
//-> light-source(area) @topLightSource2 [vector3r emitted-radiance "3.4 3.4 3.4"]
//-> actor(light) @topLight2 [geometry geometry @plane] [material material @topLightMaterial2] [light-source light-source @topLightSource2]
//-> actor(light) translate(@topLight2) [vector3r factor "3 4.75 0"]
//-> actor(light) rotate(@topLight2)    [vector3r axis "1 0 0"] [real degree 90]
//-> actor(light) scale(@topLight2)     [vector3r factor "3 3 3"]

// left wall
-> material(matte-opaque) @leftWallMaterial [vector3r albedo "0.5 0.5 0.5"]
-> actor(model) @leftWall [geometry geometry @plane] [material material @leftWallMaterial]
-> actor(model) translate(@leftWall) [vector3r factor "-5 0 0"]
-> actor(model) rotate(@leftWall)    [vector3r axis "0 1 0"] [real degree 90]
-> actor(model) scale(@leftWall)     [vector3r factor "10 10 10"]

// right wall
-> material(matte-opaque) @rightWallMaterial [vector3r albedo "0.5 0.5 0.5"]
-> actor(model) @rightWall [geometry geometry @plane] [material material @rightWallMaterial]
-> actor(model) translate(@rightWall) [vector3r factor "5 0 0"]
-> actor(model) rotate(@rightWall)    [vector3r axis "0 1 0"] [real degree -90]
-> actor(model) scale(@rightWall)     [vector3r factor "10 10 10"]

// top wall
-> material(matte-opaque) @topWallMaterial [vector3r albedo "0.7 0.7 0.7"]
-> actor(model) @topWall [geometry geometry @plane] [material material @topWallMaterial]
-> actor(model) translate(@topWall) [vector3r factor "0 5 0"]
-> actor(model) rotate(@topWall) [vector3r axis "1 0 0"] [real degree 90]
-> actor(model) scale(@topWall) [vector3r factor "10 10 10"]

// bottom wall
-> material(matte-opaque) @bottomWallMaterial [vector3r albedo "0.7 0.7 0.7"]
//-> material(ideal-substance) @bottomWallMaterial [string type dielectric-reflector] [real ior-outer 1] [real ior-inner 1.5]
-> actor(model) @bottomWall [geometry geometry @plane] [material material @bottomWallMaterial]
-> actor(model) translate(@bottomWall) [vector3r factor "0 -5 0"]
-> actor(model) rotate(@bottomWall) [vector3r axis "1 0 0"] [real degree -90]
-> actor(model) scale(@bottomWall) [vector3r factor "10 10 10"]

// back wall
-> material(matte-opaque) @backWallMaterial [vector3r albedo "0.7 0.7 0.7"]
-> actor(model) @backWall [geometry geometry @plane] [material material @backWallMaterial]
-> actor(model) translate(@backWall) [vector3r factor "0 0 -5"]
-> actor(model) scale(@backWall) [vector3r factor "10 10 10"]

// create materials
-> material(matte-opaque) @diffuseMaterial [vector3r albedo "0.5 0.9 0.5"]
-> material(abraded-opaque) @goldMaterial [vector3r albedo "0.0 0.0 0.0"] [real roughness 0.0] [vector3r f0 "1.0 0.765557 0.336057"]
-> material(abraded-translucent) @glassMaterial [vector3r albedo "0.0 0.0 0.0"] [real roughness 0.0] [vector3r f0 "0.04 0.04 0.04"]
   [real ior 1.5]

-> material(ideal-substance) @idealDielectricReflector [string type dielectric-reflector] [real ior-outer 1] [real ior-inner 1.5]

-> material(ideal-substance) @idealDielectricTransmitter [string type transmitter] [real ior-outer 1] [real ior-inner 1.5]

-> material(ideal-substance) @idealMetallicReflector 
[string type metallic-reflector] [real ior-outer 1] [vector3r f0-rgb "1 1 1"]

// diffuse object
//-> geometry(sphere) @diffuseGeometry [real radius 1.5]
//-> actor(model) @diffuseModel [geometry geometry @diffuseGeometry] [material material @idealDielectricTransmitter]
//-> actor(model) translate(@diffuseModel) [vector3r factor "-3 -3.5 0"]

// metal object
//-> geometry(sphere) @metalGeometry [real radius 1.5]
//-> actor(model) @metalModel [geometry geometry @metalGeometry] [material material @goldMaterial]
//-> actor(model) translate(@metalModel) [vector3r factor "0 -3.5 0"]

// glass object
//-> geometry(sphere) @glassGeometry [real radius 1.5]
//-> actor(model) @glassModel [geometry geometry @glassGeometry] [material material @glassMaterial]
//-> actor(model) translate(@glassModel) [vector3r factor "3 0 0"]

//-> geometry(sphere) @testGeometry [real radius 2.5]
//-> actor(model) @testModel [geometry geometry @testGeometry] [material material @idealDielectricTransmitter]